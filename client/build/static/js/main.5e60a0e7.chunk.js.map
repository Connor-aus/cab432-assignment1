{"version":3,"sources":["components/SearchBar.js","components/GameList.js","components/GameInfo.js","components/Video.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","searchText","setsearchText","Container","Col","type","placeholder","value","onChange","e","target","style","minWidth","borderRadius","paddingTop","paddingBottom","paddingLeft","Button","variant","onClick","onSubmit","marginLeft","marginBottom","GameList","games","setGames","name","selectedGame","setSelectedGame","useEffect","a","renderGameButton","game","ListGroup","Item","backgroundColor","ToggleButton","checked","setGame","selectGame","Row","color","GameInfo","rating","toString","length","substring","summary","Video","url","videoId","className","src","title","description","allowFullScreen","videoDescription","Home","count","setCount","search","setSearch","videoTrailerId","setVideoTrailerId","videoReviewId","setVideoReviewId","videoStoryId","setVideoStoryId","videoPlaythroughId","setVideoPlaythroughId","errorMessage","setErrorMessage","fetch","counter","json","data","console","log","res","fluid","disabled","marginTop","error","selection","message","App","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5e60a0e7.chunk.js","sourcesContent":["import \".././App.css\";\r\nimport React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Container, Col } from \"react-bootstrap\";\r\n\r\nexport function SearchBar(props) {\r\n  const [searchText, setsearchText] = useState(\"\");\r\n  const placeholderText = \" enter a video game you enjoy . . .\";\r\n\r\n  return (\r\n    <Container>\r\n      <Col>\r\n            <input\r\n              type=\"text\"\r\n              placeholder={placeholderText}\r\n              value={searchText}\r\n              onChange={(e) => setsearchText(e.target.value)}\r\n              style={{minWidth: \"300px\", borderRadius: \"10px\", paddingTop: \"5px\", paddingBottom: \"5px\", paddingLeft: \"5px\"}}\r\n            />\r\n            <Button\r\n              variant=\"warning\"\r\n              onClick={() => props.onSubmit(searchText)}\r\n              style={{marginLeft: \"15px\", marginBottom: \"5px\"}}\r\n            >Search</Button>\r\n      </Col>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nexport function GameList(props) {\r\n  const [games, setGames] = useState(null);\r\n  const [selectedGame, setSelectedGame] = useState(props.games[0].name);\r\n\r\n  // re-render when new arguments passed to function\r\n  useEffect(() => {\r\n    (async () => {\r\n      setGames(props.games);\r\n    })();\r\n  }, [props.games]);\r\n\r\n  if (games == null) return null;\r\n\r\n  // standard button output\r\n  function renderGameButton(game) {\r\n    return (\r\n      <ListGroup.Item style={{ backgroundColor: \"rgb(31, 34, 51)\" }}>\r\n        <ToggleButton\r\n          variant=\"outline-warning\"\r\n          type=\"checkbox\"\r\n          checked={game.name === selectedGame}\r\n          onClick={() => setGame(game)}\r\n        >\r\n          {game.name}\r\n        </ToggleButton>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n\r\n  // highlights selected game and triggers callback function\r\n  function setGame(game) {\r\n      props.selectGame(game);\r\n      setSelectedGame(game.name);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row style={{ color: \"white\" }}>\r\n        <h3>Searched Game</h3>\r\n      </Row>\r\n      <Row>\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item style={{ backgroundColor: \"rgb(31, 34, 51)\" }}>\r\n            <ToggleButton\r\n              variant=\"outline-danger\"\r\n              type=\"checkbox\"\r\n              checked={games[0].name === selectedGame}\r\n              onClick={() => setGame(games[0])}\r\n            >\r\n              {games[0].name}\r\n            </ToggleButton>\r\n          </ListGroup.Item>\r\n          <br />\r\n          <Row style={{ color: \"white\" }}>\r\n            <h3>Similar Games</h3>\r\n          </Row>\r\n          {renderGameButton(games[1])}\r\n          {renderGameButton(games[2])}\r\n          {renderGameButton(games[3])}\r\n          {renderGameButton(games[4])}\r\n          {renderGameButton(games[5])}\r\n        </ListGroup>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nexport function GameInfo(props) {\r\n  let rating = props.game.rating?.toString() ?? \"-\";\r\n\r\n  // re-render function when new argument passed\r\n  useEffect(() => {\r\n      (async () => {})();\r\n  }, [props.game]);\r\n\r\n  return (\r\n    <Container>\r\n      <Row style={{ color: 'white'}}>\r\n        <h2>{props.game.name}</h2>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <h4>Rating</h4>\r\n        <h4><i>{(rating.length > 4) ? rating.substring(0, 4) : rating} / 100</i></h4>\r\n        <br/>\r\n        <br/>\r\n        <h4>Summary</h4>\r\n        <h4><i>{props.game.summary ?? \"not found\"}</i></h4>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nexport function Video(props) {\r\n  const url = `https://www.youtube.com/embed/${props.videoId}`;\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <div className=\"ratio ratio-16x9\">\r\n          <iframe src={url} title={props.description} allowFullScreen />\r\n        </div>\r\n      </Row>\r\n      <Row style={{ color: 'white'}}>\r\n        <h5>{props.videoDescription}</h5>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { SearchBar } from \"../components/SearchBar\";\r\nimport { GameList } from \"../components/GameList\";\r\nimport { GameInfo } from \"../components/GameInfo\";\r\nimport { Video } from \"../components/Video\";\r\n\r\nexport function Home() {\r\n  const [count, setCount] = useState(\"\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [games, setGames] = useState(null);\r\n  const [selectedGame, setSelectedGame] = useState(null);\r\n  const [videoTrailerId, setVideoTrailerId] = useState(null);\r\n  const [videoReviewId, setVideoReviewId] = useState(null);\r\n  const [videoStoryId, setVideoStoryId] = useState(null);\r\n  const [videoPlaythroughId, setVideoPlaythroughId] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  // callback functio for SearchBar\r\n  const searchGame = (searchText) => {\r\n    setSearch(searchText);\r\n  };\r\n\r\n  // callback functio for GameList\r\n  const selectGame = (selection) => {\r\n    setSelectedGame(selection);\r\n  };\r\n\r\n  // triggers API to get and update counter\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        let counter = await fetch(`/count/get`);\r\n        let data = await counter.json();\r\n\r\n        counter = await fetch(`count/update/${data}`);\r\n        data = await counter.json();\r\n\r\n        setCount(data.toString());\r\n\r\n        console.log(\"Successful request for counter update\");\r\n      } catch (err) {\r\n        setCount(\"?\");\r\n        console.log(\"Error fetching counter update : \" + err);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  // triggers API request for game data\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (search === \"\") return;\r\n\r\n      try {\r\n        let res = await fetch(`/search/${search}`);\r\n        let data = await res.json();\r\n\r\n        // display error if search returns no results\r\n        if (data === 0) {\r\n          setErrorMessage(\"game not found\");\r\n          return;\r\n        }\r\n\r\n        setErrorMessage(\"\");\r\n        setSelectedGame(data[0]);\r\n        setGames(data);\r\n\r\n        console.log(\"Successful request for game data : \" + search);\r\n      } catch (err) {\r\n        setErrorMessage(\"error gathering game data\");\r\n        console.log(\"Error fetching data : \" + err);\r\n      }\r\n    })();\r\n  }, [search]);\r\n\r\n  // triggers API request for video ids\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (selectedGame == null) return;\r\n\r\n      try {\r\n        let res = await fetch(`/video/${selectedGame.name} game trailer`);\r\n        let data = await res.json();\r\n        setVideoTrailerId(data);\r\n\r\n        console.log(\"Successful request for game trailer : \" + selectedGame.name);\r\n      } catch (err) {\r\n        console.log(\"Error fetching video trailer data : \" + err);\r\n      }\r\n\r\n      try {\r\n        let res = await fetch(`/video/${selectedGame.name} game review`);\r\n        let data = await res.json();\r\n        setVideoReviewId(data);\r\n\r\n        console.log(\"Successful request for game review : \" + selectedGame.name);\r\n      } catch (err) {\r\n        console.log(\"Error fetching video review data : \" + err);\r\n      }\r\n\r\n      try {\r\n        let res = await fetch(`/video/${selectedGame.name} game story`);\r\n        let data = await res.json();\r\n        setVideoStoryId(data);\r\n\r\n        console.log(\"Successful request for game story : \" + selectedGame.name);\r\n      } catch (err) {\r\n        console.log(\"Error fetching video story data : \" + err);\r\n      }\r\n\r\n      try {\r\n        let res = await fetch(`/video/${selectedGame.name} playthrough ep 1`);\r\n        let data = await res.json();\r\n        setVideoPlaythroughId(data);\r\n\r\n        console.log(\"Successful request for game playthrough : \" + selectedGame.name);\r\n      } catch (err) {\r\n        console.log(\"Error fetching video playthrough data : \" + err);\r\n      }\r\n    })();\r\n  }, [selectedGame]);\r\n\r\n  return (\r\n    <Container fluid className=\"bordercon\">\r\n      <Row>\r\n        <Col>\r\n          <br />\r\n          <Button variant=\"primary\" disabled style={{ marginLeft: \"15px\" }}>\r\n            view count: {count}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ color: \"rgb(255, 188, 62)\", marginTop: \"30px\" }}>\r\n        <h1>Welcome to NextGame</h1>\r\n      </Row>\r\n      <Row className=\"borderr\">\r\n        <Col className=\"bordercol\">\r\n          <SearchBar onSubmit={searchGame} />\r\n        </Col>\r\n      </Row>\r\n      {error(errorMessage)}\r\n      <Row className=\"borderr\">\r\n        <Col className=\"bordercol\">\r\n          {games ? <GameList games={games} selectGame={selectGame} /> : null}\r\n        </Col>\r\n        <Col className=\"bordercol\">\r\n          {selectedGame ? <GameInfo game={selectedGame} /> : null}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"borderr\">\r\n        <Col className=\"bordercol\">\r\n          {videoTrailerId ? (\r\n            <Video\r\n              videoId={videoTrailerId}\r\n              videoDescription={`${selectedGame.name} Trailer`}\r\n            />\r\n          ) : null}\r\n        </Col>\r\n        <Col className=\"bordercol\">\r\n          {videoReviewId ? (\r\n            <Video\r\n              videoId={videoReviewId}\r\n              videoDescription={`${selectedGame.name} Review`}\r\n            />\r\n          ) : null}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"borderr\">\r\n        <Col className=\"bordercol\">\r\n          {videoStoryId ? (\r\n            <Video\r\n              videoId={videoStoryId}\r\n              videoDescription={`${selectedGame.name} Story`}\r\n            />\r\n          ) : null}\r\n        </Col>\r\n        <Col className=\"bordercol\">\r\n          {videoPlaythroughId ? (\r\n            <Video\r\n              videoId={videoPlaythroughId}\r\n              videoDescription={`${selectedGame.name} Playthrough`}\r\n            />\r\n          ) : null}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// error message if no game is found\r\nconst error = (message) => {\r\n  if (message === \"\") return;\r\n\r\n  return (\r\n    <Row style={{ color: \"white\" }}>\r\n      <h4>\r\n        <i>{message}</i>\r\n      </h4>\r\n    </Row>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\n\nimport { Home } from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{backgroundColor: \"rgb(31, 34, 51)\", minHeight: \"100vh\"}}>\n      <header className=\"App-header\">\n        <h3 className=\"headingText\">NextGame</h3>\n      </header>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}